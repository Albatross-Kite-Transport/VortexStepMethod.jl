var documenterSearchIndex = {"docs":
[{"location":"types/#Enumerations","page":"Exported Types","title":"Enumerations","text":"","category":"section"},{"location":"types/#VortexStepMethod.Model","page":"Exported Types","title":"VortexStepMethod.Model","text":"Model VSM LLT\n\nEnumeration of the implemented model types.\n\nElements\n\nVSM: Vortex Step Method\nLLT: Lifting Line Theory\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.WingType","page":"Exported Types","title":"VortexStepMethod.WingType","text":"WingType `RECTANGULAR` `CURVED` `ELLIPTICAL`\n\nEnumeration of the implemented wing types.\n\nElements:\n\nRECTANGULAR\nCURVED\nELLIPTICAL\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.AeroModel","page":"Exported Types","title":"VortexStepMethod.AeroModel","text":"AeroModel LEI_AIRFOIL_BREUKELS POLAR_VECTORS POLAR_MATRICES INVISCID\n\nEnumeration of the implemented aerodynamic models. See also: AeroData\n\nElements\n\nLEI_AIRFOIL_BREUKELS: Polynom approximation for leading edge inflatable kites\nPOLAR_VECTORS: Polar vectors as function of alpha (lookup tables with interpolation)\nPOLAR_MATRICES: Polar matrices as function of alpha and delta (lookup tables with interpolation)\nINVISCID\n\nwhere alpha is the angle of attack, delta is trailing edge angle.\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.PanelDistribution","page":"Exported Types","title":"VortexStepMethod.PanelDistribution","text":"PanelDistribution LINEAR COSINE COSINE_VAN_GARREL SPLIT_PROVIDED UNCHANGED\n\nEnumeration of the implemented panel distributions.\n\nElements\n\nLINEAR               # Linear distribution\nCOSINE               # Cosine distribution\nCOSINE_VAN_GARREL  # van Garrel cosine distribution\nSPLIT_PROVIDED     # Split provided sections\nUNCHANGED            # Keep original sections\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.InitialGammaDistribution","page":"Exported Types","title":"VortexStepMethod.InitialGammaDistribution","text":"InitialGammaDistribution ELLIPTIC ZEROS\n\nEnumeration of the implemented initial gamma distributions.\n\nElements\n\nELLIPTIC\nZEROS\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.SolverStatus","page":"Exported Types","title":"VortexStepMethod.SolverStatus","text":"SolverStatus FEASIBLE INFEASIBLE FAILURE\n\nEnumeration to report back the validity of the result of the solve! function. Used in the VSMSolution struct.\n\nElements\n\nFEASIBLE: The gamma distribution is physically feasible\nINFEASIBLE: The gamma distribution is physically infeasible\nFAILURE: The result did not converge within the maximal number of iterations\n\n\n\n\n\n","category":"type"},{"location":"types/#Basic-Vectors","page":"Exported Types","title":"Basic Vectors","text":"","category":"section"},{"location":"types/#VortexStepMethod.MVec3","page":"Exported Types","title":"VortexStepMethod.MVec3","text":"const MVec3    = MVector{3, Float64}\n\nBasic 3-dimensional vector, stack allocated, mutable.\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.PosVector","page":"Exported Types","title":"VortexStepMethod.PosVector","text":"const PosVector=Union{MVec3, Vector}\n\nPosition vector, either a MVec3 or a Vector for use in function signatures.\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.VelVector","page":"Exported Types","title":"VortexStepMethod.VelVector","text":"const VelVector=Union{MVec3, Vector}\n\nVelocity vector, either a MVec3 or a Vector for use in function signatures.\n\n\n\n\n\n","category":"type"},{"location":"types/#Aerodynamic-data","page":"Exported Types","title":"Aerodynamic data","text":"","category":"section"},{"location":"types/#VortexStepMethod.AeroData","page":"Exported Types","title":"VortexStepMethod.AeroData","text":"AeroData= Union{\n    Nothing,\n    NTuple{2, Float64},\n    Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}},\n    Tuple{Vector{Float64}, Vector{Float64}, Matrix{Float64}, Matrix{Float64}, Matrix{Float64}}\n}\n\nUnion of different definitions of the aerodynamic properties of a wing section. See also: AeroModel\n\nnothing for INVISCID\n(tube_diameter, camber) for LEI_AIRFOIL_BREUKELS\n(alpha_range, cl_vector, cd_vector, cm_vector) for POLAR_VECTORS\n(alpha_range, delta_range, cl_matrix, cd_matrix, cm_matrix) for POLAR_MATRICES \n\nwhere alpha is the angle of attack [rad], delta is trailing edge angle [rad], cl the lift coefficient, cd the drag coefficient and cm the pitching moment coefficient. The camber of a kite refers to  the curvature of its airfoil shape. The camber is typically measured as the maximum distance  between the mean camber line (the line equidistant from the upper and lower surfaces)  and the chord line of the airfoil.\n\n\n\n\n\n","category":"type"},{"location":"types/#Wing-Geometry,-Panel-and-Aerodynamics","page":"Exported Types","title":"Wing Geometry, Panel and Aerodynamics","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"A body is constructed of one or more abstract wings. An abstract wing can be a Wing or a RamAirWing.  A Wing/ RamAirWing has one or more sections.","category":"page"},{"location":"types/#VortexStepMethod.Section","page":"Exported Types","title":"VortexStepMethod.Section","text":"@with_kw mutable struct Section\n\nRepresents a wing section with leading edge, trailing edge, and aerodynamic properties.\n\nFields\n\nLE_point::MVec3 = zeros(MVec3): Leading edge point coordinates\nTE_point::MVec3 = zeros(MVec3): Trailing edge point coordinates\naero_model::AeroModel = INVISCID: AeroModel\naero_data::AeroData = nothing: See: AeroData\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.Section-Tuple{Union{Vector, StaticArraysCore.MVector{3, Float64}}, Union{Vector, StaticArraysCore.MVector{3, Float64}}, Any}","page":"Exported Types","title":"VortexStepMethod.Section","text":"Section(LE_point::PosVector, TE_point::PosVector, aero_model)\n\nCreate a new wing section with the specified leading edge point, trailing edge point,  and aerodynamic model.\n\nArguments\n\nLE_point::PosVector: Leading edge point coordinates\nTE_point::PosVector: Trailing edge point coordinates  \naero_model::AeroModel: Aerodynamic model type (e.g., INVISCID, POLAR_VECTORS)\n\nReturns\n\nSection: A new section with the specified parameters and no aerodynamic data\n\n\n\n\n\n","category":"method"},{"location":"types/#VortexStepMethod.Wing","page":"Exported Types","title":"VortexStepMethod.Wing","text":"Wing\n\nRepresents a wing composed of multiple sections with aerodynamic properties.\n\nFields\n\nn_panels::Int16: Number of panels in aerodynamic mesh\nn_groups::Int16: Number of panel groups\nspanwise_distribution::PanelDistribution: PanelDistribution\nspanwise_direction::MVec3: Wing span direction vector\nsections::Vector{Section}: Vector of wing sections, see: Section\nrefined_sections::Vector{Section}: Vector of refined wing sections, see: Section\nremove_nan::Bool: Wether to remove the NaNs from interpolations or not\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.Wing-Tuple{Int64}","page":"Exported Types","title":"VortexStepMethod.Wing","text":"Wing(n_panels::Int;\n     n_groups=n_panels,\n     spanwise_distribution::PanelDistribution=LINEAR,\n     spanwise_direction::PosVector=MVec3([0.0, 1.0, 0.0]),\n     remove_nan::Bool=true)\n\nConstructor for a Wing struct with default values that initializes the sections  and refined sections as empty arrays.\n\nParameters\n\nn_panels::Int: Number of panels in aerodynamic mesh\nn_groups::Int: Number of panel groups in aerodynamic mesh\nspanwise_distribution::PanelDistribution = LINEAR: PanelDistribution\nspanwise_direction::MVec3 = MVec3([0.0, 1.0, 0.0]): Wing span direction vector\nremove_nan::Bool: Wether to remove the NaNs from interpolations or not\n\n\n\n\n\n","category":"method"},{"location":"types/#VortexStepMethod.RamAirWing","page":"Exported Types","title":"VortexStepMethod.RamAirWing","text":"RamAirWing <: AbstractWing\n\nA ram-air wing model that represents a curved parafoil with deformable aerodynamic surfaces.\n\nCore Features\n\nCurved wing geometry derived from 3D mesh (.obj file)\nAerodynamic properties based on 2D airfoil data (.dat file)\nSupport for control inputs (twist angles and trailing edge deflections)\nInertial and geometric properties calculation\n\nNotable Fields\n\nn_panels::Int16: Number of panels in aerodynamic mesh\nn_groups::Int16: Number of control groups for distributed deformation\nmass::Float64: Total wing mass in kg\ngamma_tip::Float64: Angular extent from center to wing tip\ninertia_tensor::Matrix{Float64}: Full 3x3 inertia tensor in the kite body frame\nT_cad_body::MVec3: Translation vector from CAD frame to body frame\nR_cad_body::MMat3: Rotation matrix from CAD frame to body frame\nradius::Float64: Wing curvature radius\ntheta_dist::Vector{Float64}: Panel twist angle distribution\ndelta_dist::Vector{Float64}: Trailing edge deflection distribution\n\nSee constructor RamAirWing(obj_path, dat_path; kwargs...) for usage details.\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.RamAirWing-Tuple{Any, Any}","page":"Exported Types","title":"VortexStepMethod.RamAirWing","text":"RamAirWing(obj_path, dat_path; kwargs...)\n\nCreate a ram-air wing model from 3D geometry and airfoil data files.\n\nThis constructor builds a complete aerodynamic model by:\n\nLoading or generating wing geometry from the .obj file\nCreating aerodynamic polars from the airfoil .dat file\nComputing inertial properties and coordinate transformations\nSetting up control surfaces and panel distribution\n\nArguments\n\nobj_path: Path to .obj file containing 3D wing geometry\ndat_path: Path to .dat file containing 2D airfoil profile\n\nKeyword Arguments\n\ncrease_frac=0.9: Normalized trailing edge hinge location (0-1)\nwind_vel=10.0: Reference wind velocity for XFoil analysis (m/s)\nmass=1.0: Wing mass (kg)\nn_panels=56: Number of aerodynamic panels across wingspan\nn_groups=4: Number of control groups for deformation\nn_sections=n_panels+1: Number of spanwise cross-sections\nalign_to_principal=false: Align body frame to principal axes of inertia\nspanwise_distribution=UNCHANGED: Panel distribution type\nremove_nan=true: Interpolate NaN values in aerodynamic data\nalpha_range=deg2rad.(-5:1:20): Angle of attack range for polars (rad)\ndelta_range=deg2rad.(-5:1:20): Trailing edge deflection range for polars (rad)\nprn=true: if info messages shall be printed\n\nReturns\n\nA fully initialized RamAirWing instance ready for aerodynamic simulation.\n\nExample\n\n# Create a ram-air wing from geometry files\nwing = RamAirWing(\n    \"path/to/wing.obj\",\n    \"path/to/airfoil.dat\";\n    mass=1.5,\n    n_panels=40,\n    n_groups=4\n)\n\n\n\n\n\n","category":"method"},{"location":"types/#VortexStepMethod.BodyAerodynamics","page":"Exported Types","title":"VortexStepMethod.BodyAerodynamics","text":"@with_kw mutable struct BodyAerodynamics{P}\n\nMain structure for calculating aerodynamic properties of bodies. Use the constructor to initialize.\n\nFields\n\npanels::Vector{Panel}: Vector of Panel structs\nwings::Union{Vector{Wing}, Vector{RamAirWing}}: A vector of wings; a body can have multiple wings\nva::MVec3 = zeros(MVec3):   A vector of the apparent wind speed, see: MVec3\nomega::MVec3 = zeros(MVec3): A vector of the turn rates around the kite body axes\ngamma_distribution=zeros(Float64, P): A vector of the circulation                        of the velocity field; Length: Number of segments. [m²/s]\nalpha_uncorrected=zeros(Float64, P): angles of attack per panel\nalpha_corrected=zeros(Float64, P):   corrected angles of attack per panel\nstall_angle_list=zeros(Float64, P):  stall angle per panel\nalpha_array::MVector{P, Float64} = zeros(Float64, P)\nv_a_array::MVector{P, Float64} = zeros(Float64, P)\nwork_vectors::NTuple{10, MVec3} = ntuple(_ -> zeros(MVec3), 10)\nAIC::Array{Float64, 3} = zeros(3, P, P)\nprojected_area::Float64 = 1.0: The area projected onto the xy-plane of the kite body reference frame [m²]\ny::MVector{P, Float64} = zeros(MVector{P, Float64})\ncache::Vector{PreallocationTools.LazyBufferCache{typeof(identity), typeof(identity)}} = [LazyBufferCache() for _ in 1:5]\n\n\n\n\n\n","category":"type"},{"location":"types/#The-Solver-and-its-results","page":"Exported Types","title":"The Solver and its results","text":"","category":"section"},{"location":"types/#VortexStepMethod.Solver","page":"Exported Types","title":"VortexStepMethod.Solver","text":"Solver\n\nMain solver structure for the Vortex Step Method.See also: solve\n\nAttributes\n\nGeneral settings\n\naerodynamic_model_type::Model = VSM: The model type, see: Model\ndensity::Float64 = 1.225: Air density [kg/m³] \nmax_iterations::Int64 = 1500\nrtol::Float64 = 1e-5: relative error\ntol_reference_error::Float64 = 0.001\nrelaxation_factor::Float64 = 0.03: Relaxation factor for convergence \n\nDamping settings\n\nis_with_artificial_damping::Bool = false: Whether to apply artificial damping\nartificial_damping::NamedTuple{(:k2, :k4), Tuple{Float64, Float64}} = (k2=0.1, k4=0.0): Artificial damping parameters\n\nAdditional settings\n\ntype_initial_gamma_distribution::InitialGammaDistribution = ELLIPTIC: see: InitialGammaDistribution\ncore_radius_fraction::Float64 = 1e-20: \nmu::Float64 = 1.81e-5: Dynamic viscosity [N·s/m²]\nis_only_f_and_gamma_output::Bool = false: Whether to only output f and gamma\n\nSolution\n\nsol::VSMSolution = VSMSolution(): The result of calling solve! \n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.VSMSolution","page":"Exported Types","title":"VortexStepMethod.VSMSolution","text":"VSMSolution\n\nStruct for storing the solution of the solve! function. Must contain all info needed by KiteModels.jl.\n\nAttributes\n\npanel_width_array::Vector{Float64}: Width of the panels [m]\nalpha_array::Vector{Float64}: Angle of attack of each panel relative to the apparent wind [rad]\ncl_array::Vector{Float64}: Lift coefficients of the panels [-]\ncd_array::Vector{Float64}: Drag coefficients of the panels [-]\ncm_array::Vector{Float64}: Pitching moment coefficients of the panels [-]\npanel_lift::Vector{Float64}: Lift force of the panels [N]\npanel_drag::Vector{Float64}: Drag force of the panels [N]\npanel_moment::Vector{Float64}: Pitching moment around the spanwise vector of the panels [Nm]\nf_body_3D::Matrix{Float64}: Matrix of the aerodynamic forces (x, y, z vectors) [N]\nm_body_3D::Matrix{Float64}: Matrix of the aerodynamic moments [Nm]\ngamma_distribution::Union{Nothing, Vector{Float64}}: Vector containing the panel circulations.\nforce::MVec3: Aerodynamic force vector in KB reference frame [N]\nmoment::MVec3: Aerodynamic moments [Mx, My, Mz] around the reference point [Nm]\nforce_coeffs::MVec3: Aerodynamic force coefficients [CFx, CFy, CFz] [-]\nmoment_coeffs::MVec3: Aerodynamic moment coefficients [CMx, CMy, CMz] [-]\nmoment_dist::Vector{Float64}: Pitching moments around the spanwise vector of each panel. [Nm]\nmoment_coeff_dist::Vector{Float64}: Pitching moment coefficient around the spanwise vector of each panel. [-]\nsolver_status::SolverStatus: enum, see SolverStatus\n\n\n\n\n\n","category":"type"},{"location":"functions/#Functions-for-creating-the-geometry","page":"Exported Functions","title":"Functions for creating the geometry","text":"","category":"section"},{"location":"functions/#VortexStepMethod.add_section!","page":"Exported Functions","title":"VortexStepMethod.add_section!","text":"add_section!(wing::Wing, LE_point::PosVector, TE_point::PosVector, \n             aero_model, aero_data::AeroData=nothing)\n\nAdd a new section to the wing.\n\nArguments:\n\nwing::Wing: The Wing to which a section shall be added\nLE_point::PosVector: PosVector of the point on the side of the leading edge\nTE_point::PosVector: PosVector of the point on the side of the trailing edge\naero_model::AeroModel: AeroModel\naero_data::AeroData: See AeroData  \n\n\n\n\n\n","category":"function"},{"location":"functions/#Setting-the-inflow-conditions-and-solving","page":"Exported Functions","title":"Setting the inflow conditions and solving","text":"","category":"section"},{"location":"functions/#VortexStepMethod.set_va!","page":"Exported Functions","title":"VortexStepMethod.set_va!","text":"set_va!(body_aero::BodyAerodynamics, va::VelVector, omega=zeros(MVec3))\n\nSet velocity array and update wake filaments.\n\nArguments\n\nbody_aero::BodyAerodynamics: The BodyAerodynamics struct to modify\nva::VelVector: Velocity vector of the apparent wind speed           [m/s]\nomega::VelVector: Turn rate vector around x y and z axis            [rad/s]\n\n\n\n\n\n","category":"function"},{"location":"functions/#CommonSolve.solve","page":"Exported Functions","title":"CommonSolve.solve","text":"solve(solver::Solver, body_aero::BodyAerodynamics, gamma_distribution=nothing; \n      log=false, reference_point=zeros(MVec3))\n\nMain solving routine for the aerodynamic model. Reference point is in the kite body (KB) frame. See also: solve!\n\nArguments:\n\nsolver::Solver: The solver to use, could be a VSM or LLT solver. See: Solver\nbody_aero::BodyAerodynamics: The aerodynamic body. See: BodyAerodynamics\ngamma_distribution: Initial circulation vector or nothing; Length: Number of segments. [m²/s]\n\nKeyword Arguments:\n\nlog=false: If true, print the number of iterations and other info.\nreference_point=zeros(MVec3)\n\nReturns\n\nA dictionary with the results.\n\n\n\n\n\n","category":"function"},{"location":"functions/#CommonSolve.solve!","page":"Exported Functions","title":"CommonSolve.solve!","text":"solve!(solver::Solver, body_aero::BodyAerodynamics, gamma_distribution=solver.sol.gamma_distribution; \n      log=false, reference_point=zeros(MVec3), moment_frac=0.1)\n\nMain solving routine for the aerodynamic model. Reference point is in the kite body (KB) frame. This version is modifying the solver.sol struct and is faster than the solve function which returns a dictionary.\n\nArguments:\n\nsolver::Solver: The solver to use, could be a VSM or LLT solver. See: Solver\nbody_aero::BodyAerodynamics: The aerodynamic body. See: BodyAerodynamics\ngamma_distribution: Initial circulation vector or nothing; Length: Number of segments. [m²/s]\n\nKeyword Arguments:\n\nlog=false: If true, print the number of iterations and other info.\nreference_point=zeros(MVec3)\nmoment_frac=0.1: X-coordinate of normalized panel around which the moment distribution should be calculated.\n\nReturns\n\nThe solution of type VSMSolution\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.init!-Tuple{BodyAerodynamics}","page":"Exported Functions","title":"VortexStepMethod.init!","text":"init!(body_aero::BodyAerodynamics; init_aero, va, omega)\n\nInitialize a BodyAerodynamics struct in-place by setting up panels and coefficients.\n\nArguments\n\nbody_aero::BodyAerodynamics: The structure to initialize\n\nKeyword Arguments\n\ninit_aero::Bool: Wether to initialize the aero data or not\nva=[15.0, 0.0, 0.0]: Apparent wind vector\nomega=zeros(3): Turn rate in kite body frame x y and z\n\nReturns\n\nnothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#VortexStepMethod.linearize","page":"Exported Functions","title":"VortexStepMethod.linearize","text":"linearize(solver::Solver, body_aero::BodyAerodynamics, wing::RamAirWing, y::Vector{T}; \n    theta_idxs=1:4, delta_idxs=nothing, va_idxs=nothing, omega_idxs=nothing, kwargs...) where T\n\nCompute the Jacobian matrix for a ram air wing around an operating point using finite differences.\n\nArguments\n\nsolver: VSM solver instance (must be initialized)\nbody_aero: Aerodynamic body representation\nwing: RamAirWing model to linearize\ny: Input vector at operating point, containing a combination of control angles and velocities\n\nKeyword Arguments\n\ntheta_idxs: Indices of twist angles in input vector (default: 1:4)\ndelta_idxs: Indices of trailing edge deflection angles (default: nothing)\nva_idxs: Indices of velocity components [vx, vy, vz] (default: nothing)\nomega_idxs: Indices of angular velocity components [ωx, ωy, ωz] (default: nothing)\nkwargs...: Additional arguments passed to the solve! function\n\nReturns\n\njac: Jacobian matrix (∂outputs/∂inputs)\nresults: Output vector at the operating point [Fx, Fy, Fz, Mx, My, Mz, group_moments...]\n\nExample\n\n# Initialize wing and solver\nwing = RamAirWing(\"path/to/body.obj\", \"path/to/foil.dat\")\nbody_aero = BodyAerodynamics([wing])\nsolver = Solver(body_aero)\n\n# Define operating point with 4 control angles, velocity, and angular rates\ny_op = [zeros(4);        # 4 twist control angles (rad)\n       [15.0, 0.0, 0.0]; # Velocity vector (m/s)\n       zeros(3)]         # Angular velocity (rad/s)\n\n# Compute Jacobian\njac, results = linearize(\n    solver, body_aero, wing, y_op;\n    theta_idxs=1:4,      # Twist angles\n    va_idxs=5:7,         # Velocity components\n    omega_idxs=8:10      # Angular rates\n)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Main-Plotting-Functions","page":"Exported Functions","title":"Main Plotting Functions","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"The plotting functions are implemented as package extension. This means that they are only available if the package ControlPlots.jl was loaded BEFORE loading VortexStepMethod.jl.","category":"page"},{"location":"functions/#VortexStepMethod.plot_geometry","page":"Exported Functions","title":"VortexStepMethod.plot_geometry","text":"plot_geometry(body_aero::BodyAerodynamics, title; \n              data_type=\".pdf\", save_path=nothing, \n              is_save=false, is_show=false, \n              view_elevation=15, view_azimuth=-120, use_tex=false)\n\nPlot wing geometry from different viewpoints and optionally save/show plots.\n\nArguments:\n\nbody_aero: the BodyAerodynamics to plot\ntitle: plot title\n\nKeyword arguments:\n\ndata_type`: string with the file type postfix (default: \".pdf\")\nsave_path: path for saving the graphic (default: nothing)\nis_save: boolean value, indicates if the graphic shall be saved (default: false)\nis_show: boolean value, indicates if the graphic shall be displayed (default: false)\nview_elevation: initial view elevation angle (default: 15) [°]\nview_azimuth: initial view azimuth angle (default: -120) [°]\nuse_tex: if the external pdflatex command shall be used (default: false)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.plot_distribution","page":"Exported Functions","title":"VortexStepMethod.plot_distribution","text":"plot_distribution(y_coordinates_list, results_list, label_list;  \n                  title=\"spanwise_distribution\", data_type=\".pdf\",\n                  save_path=nothing, is_save=false, is_show=true, use_tex=false)\n\nPlot spanwise distributions of aerodynamic properties.\n\nArguments\n\ny_coordinates_list: List of spanwise coordinates\nresults_list: List of result dictionaries\nlabel_list: List of labels for different results\n\nKeyword arguments\n\ntitle: Plot title (default: \"spanwise_distribution\")\ndata_type: File extension for saving (default: \".pdf\")\nsave_path: Path to save plots (default: nothing)\nis_save: Whether to save plots (default: false)\nis_show: Whether to display plots (default: true)\nuse_tex: if the external pdflatex command shall be used\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.plot_polars","page":"Exported Functions","title":"VortexStepMethod.plot_polars","text":"plot_polars(solver_list, body_aero_list, label_list;\n            literature_path_list=String[], \n            angle_range=range(0, 20, 2), angle_type=\"angle_of_attack\", \n            angle_of_attack=0.0, side_slip=0.0, v_a=10.0, \n            title=\"polar\", data_type=\".pdf\", save_path=nothing, \n            is_save=true, is_show=true, use_tex=false)\n\nPlot polar data comparing different solvers and configurations.\n\nArguments\n\nsolver_list: List of aerodynamic solvers\nbody_aero_list: List of wing aerodynamics objects\nlabel_list: List of labels for each configuration\n\nKeyword arguments\n\nliterature_path_list: Optional paths to literature data files\nangle_range: Range of angles to analyze [°]\nangle_type: \"angle_of_attack\" or \"side_slip\"; (default: angle_of_attack) \nangle_of_attack: AoA to be used for plotting the polars (default: 0.0) [rad]\nside_slip: side slip angle (default: 0.0) [rad]\nv_a: norm of apparent wind speed (default: 10.0) [m/s]\ntitle: plot title\ndata_type: File extension for saving (default: \".pdf\")\nsave_path: Path to save plots (default: nothing)\nis_save: Whether to save plots (default: true)\nis_show: Whether to display plots (default: true)\nuse_tex: if the external pdflatex command shall be used (default: false)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Helper-Functions","page":"Exported Functions","title":"Helper Functions","text":"","category":"section"},{"location":"functions/#VortexStepMethod.save_plot","page":"Exported Functions","title":"VortexStepMethod.save_plot","text":"save_plot(fig, save_path, title; data_type=\".pdf\")\n\nSave a plot to a file.\n\nArguments\n\nfig: Plots figure object\nsave_path: Path to save the plot\ntitle: Title of the plot\n\nKeyword arguments\n\ndata_type: File extension (default: \".pdf\")\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.show_plot","page":"Exported Functions","title":"VortexStepMethod.show_plot","text":"show_plot(fig; dpi=130)\n\nDisplay a plot at specified DPI.\n\nArguments\n\nfig: Plots figure object\n\nKeyword arguments\n\ndpi: Dots per inch for the figure (default: 130)\n\n\n\n\n\n","category":"function"},{"location":"private_functions/#Private-Functions","page":"Private Functions","title":"Private Functions","text":"","category":"section"},{"location":"private_functions/#VortexStepMethod.calculate_AIC_matrices!","page":"Private Functions","title":"VortexStepMethod.calculate_AIC_matrices!","text":"calculate_AIC_matrices!(body_aero::BodyAerodynamics, model::Model, \n                     core_radius_fraction,\n                     va_norm_array, \n                     va_unit_array)\n\nCalculate Aerodynamic Influence Coefficient matrices.\n\nSee also: BodyAerodynamics, Model\n\nReturns: nothing\n\n\n\n\n\n","category":"function"},{"location":"private_functions/#VortexStepMethod.update_panel_properties!","page":"Private Functions","title":"VortexStepMethod.update_panel_properties!","text":"update_panel_properties!(panel_props::PanelProperties, section_list::Vector{Section}, n_panels::Int)\n\nUpdate geometric properties for each panel.\n\nArguments\n\nsection_list::Vector{Section}: List of Sections\nn_panels::Int: Number of Panels\n\nReturns:\n\nnothing, updates the PanelProperties in-place\n\n\n\n\n\n","category":"function"},{"location":"private_functions/#VortexStepMethod.calculate_inertia_tensor","page":"Private Functions","title":"VortexStepMethod.calculate_inertia_tensor","text":"calculate_inertia_tensor(vertices, faces, mass, com)\n\nCalculate the inertia tensor for a triangulated surface mesh, assuming a thin shell with uniform  surface density.\n\nArguments\n\nvertices: Vector of 3D point coordinates representing mesh vertices\nfaces: Vector of triangle indices, each defining a face of the mesh\nmass: Total mass of the shell in kg\ncom: Center of mass coordinates [x,y,z]\n\nMethod\n\nUses the thin shell approximation where:\n\nMass is distributed uniformly over the surface area\nEach triangle contributes to the inertia based on its area and position\nFor each triangle vertex p, contribution to diagonal terms is: area * (sum(p²) - p_i²)\nFor off-diagonal terms: area * (-p_i * p_j)\nFinal tensor is scaled by mass/(3*total_area) to get correct units\n\nReturns\n\n3×3 matrix representing the inertia tensor in kg⋅m²\n\n\n\n\n\n","category":"function"},{"location":"private_functions/#VortexStepMethod.group_deform!","page":"Private Functions","title":"VortexStepMethod.group_deform!","text":"group_deform!(wing::RamAirWing, theta_angles::AbstractVector, delta_angles::AbstractVector)\n\nDistribute control angles across wing panels and apply smoothing using a moving average filter.\n\nArguments\n\nwing::RamAirWing: The wing to deform\ntheta_angles::AbstractVector: Twist angles in radians for each control section\ndelta_angles::AbstractVector: Trailing edge deflection angles in radians for each control section\nsmooth::Bool: Wether to apply smoothing or not\n\nAlgorithm\n\nDistributes each control input to its corresponding group of panels\nApplies moving average smoothing with window size based on control group size\n\nErrors\n\nThrows ArgumentError if panel count is not divisible by the number of control inputs\n\nReturns\n\nnothing (modifies wing in-place)\n\n\n\n\n\n","category":"function"},{"location":"tips_and_tricks/#Tips-and-tricks","page":"Tips and tricks","title":"Tips and tricks","text":"","category":"section"},{"location":"tips_and_tricks/#What-can-this-model-simulate","page":"Tips and tricks","title":"What can this model simulate","text":"","category":"section"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"The following bodies can be simulated:","category":"page"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"conventional bodies, consisting of one or more wings\nleading edge inflatable (LEI) kites\nRAM-air kites","category":"page"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"To build the geometry of a RAM-air kite, a 3D .obj file can be used as input. In addition a .dat file is needed. It should have two columns, one for the x and one for the y coordinate of the 2D polar that is used.","category":"page"},{"location":"tips_and_tricks/#RAM-air-kite-model","page":"Tips and tricks","title":"RAM-air kite model","text":"","category":"section"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"If running the example ram_air_kite.jl fails, try to run the cleanup.jl script and then try again. Background: this example caches the calculated polars. Reading cached polars can fail after an update.","category":"page"},{"location":"tips_and_tricks/#Output-formats","page":"Tips and tricks","title":"Output formats","text":"","category":"section"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"Currently, the solve!() function returns the results as VSMSolution struct. The function solve() returns a dictionary with the results. The solve!() function is faster, and the solve() contains many more entries, therefore the first function is good for integration in dynamic models and the second one better suited for aerodynamic analysis.","category":"page"},{"location":"tips_and_tricks/#Performance","page":"Tips and tricks","title":"Performance","text":"","category":"section"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"Calling init!(body_aero; init_aero=false) is very fast. After calling deform!(wing), you have to run init!(body_aero; init_aero=false) to apply the deformed wing to the body aerodynamics. This is in turn necessary for the linearization from deformation to aerodynamic coefficients for RAM-air kites.","category":"page"},{"location":"tips_and_tricks/#Contributing","page":"Tips and tricks","title":"Contributing","text":"","category":"section"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"Please, read CONTRIBUTING.md","category":"page"},{"location":"tips_and_tricks/#Building-the-documentation-locally","page":"Tips and tricks","title":"Building the documentation locally","text":"","category":"section"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"You can build the documentation locally after checking out the source code with git, launching Julia and executing:","category":"page"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"include(\"scripts/build_docu.jl\")","category":"page"},{"location":"tips_and_tricks/","page":"Tips and tricks","title":"Tips and tricks","text":"A browser window should pop up automatically.","category":"page"},{"location":"private_types/#Private-Types","page":"Private Types","title":"Private Types","text":"","category":"section"},{"location":"private_types/#Wing-Geometry,-Panel-and-Aerodynamics","page":"Private Types","title":"Wing Geometry, Panel and Aerodynamics","text":"","category":"section"},{"location":"private_types/#VortexStepMethod.Panel","page":"Private Types","title":"VortexStepMethod.Panel","text":"@with_kw mutable struct Panel\n\nRepresents a panel in a vortex step method simulation. All points and vectors are in the kite body (KB) frame.\n\nFields\n\nTE_point_1::MVec3=zeros(MVec3): First trailing edge point\nLE_point_1::MVec3=zeros(MVec3): First leading edge point\nTE_point_2::MVec3=zeros(MVec3): Second trailing edge point\nLE_point_2::MVec3=zeros(MVec3): Second leading edge point\nchord::Float64=0: Panel chord length\nva::MVec3=zeros(MVec3): Panel velocity\ncorner_points::MMatrix{3, 4, Float64}=zeros(MMatrix{3, 4, Float64}: Panel corner points\naero_model::AeroModel=INVISCID: Aerodynamic model type AeroModel\naero_center::Vector{Float64}: Panel aerodynamic center\ncl_coeffs::Vector{Float64}=zeros(Float64, 3)\ncd_coeffs::Vector{Float64}=zeros(Float64, 3)\ncm_coeffs::Vector{Float64}=zeros(Float64, 3)\ncl_interp::Union{Nothing, I1, I2} = nothing\ncd_interp::Union{Nothing, I1, I2} = nothing\ncm_interp::Union{Nothing, I1, I2} = nothing\ncontrol_point::Vector{MVec3}: Panel control point\nbound_point_1::Vector{MVec3}: First bound point\nbound_point_2::Vector{MVec3}: Second bound point\nx_airf::MVec3=zeros(MVec3): Unit vector tangential to chord line\ny_airf::MVec3=zeros(MVec3): Unit vector in spanwise direction\nz_airf::MVec3=zeros(MVec3): Unit vector, cross product of xairf and yairf\nwidth::Float64=0: Panel width\nfilaments::Tuple{BoundFilament,BoundFilament,BoundFilament,SemiInfiniteFilament,SemiInfiniteFilament} = (       BoundFilament(),       BoundFilament(),       BoundFilament(),       SemiInfiniteFilament(),       SemiInfiniteFilament()   ): Panel filaments, see: BoundFilament\n\n\n\n\n\n","category":"type"},{"location":"private_types/#VortexStepMethod.PanelProperties","page":"Private Types","title":"VortexStepMethod.PanelProperties","text":"PanelProperties\n\nStructure to hold calculated panel properties.\n\nFields\n\naero_centers::Matrix{Float64}\ncontrol_points::Matrix{Float64}\nbound_points_1::Matrix{Float64}\nbound_points_2::Matrix{Float64}\nx_airf::Matrix{Float64}: Vector of unit vectors tangential to chord line\ny_airf::Matrix{Float64}: Vector of unit vectors in spanwise direction\nz_airf::Matrix{Float64}: Vector of unit vectors pointing up (cross of xairf and yairf)\n\n\n\n\n\n","category":"type"},{"location":"private_types/#VortexStepMethod.BoundFilament","page":"Private Types","title":"VortexStepMethod.BoundFilament","text":"BoundFilament\n\nRepresents a bound vortex filament defined by two points.\n\nFields\n\nx1::MVec3=zeros(MVec3): First point\nx2::MVec3=zeros(MVec3): Second point\nlength=zero(Float64):   Filament length\nr0::MVec3=zeros(MVec3): Vector from x1 to x2\ninitialized::Bool = false\n\n\n\n\n\n","category":"type"},{"location":"examples/#Rectangular-Wing","page":"Examples","title":"Rectangular Wing","text":"","category":"section"},{"location":"examples/#Wing-Aerodynamics-Analysis-using-Vortex-Step-Method-(VSM)-and-Lift-Line-Theory-(LLT)","page":"Examples","title":"Wing Aerodynamics Analysis using Vortex-Step Method (VSM) and Lift Line Theory (LLT)","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This example demonstrates the process of setting up and analyzing a wing's aerodynamics using VSM and LLT. We'll cover the following steps:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Importing necessary libraries.\nDefine the wing parameters\nCreate wing geometry with linear panel distribution and add the wing sections\nInitializing the wing aerodynamics and set the inflow conditions.\nPlotting the geometry\nInitialize solvers for both LLT and VSM methods\nRunning an simulation with both methods\nPlotting distributions\nPlotting polars","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, install Julia and launch the Julia REPL as explained in the section Installation. Then, copy and paste to the Julia prompt:","category":"page"},{"location":"examples/#Step-1:-Importing-the-necessary-libraries:","page":"Examples","title":"Step 1: Importing the necessary libraries:","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using LinearAlgebra\nusing ControlPlots\nusing VortexStepMethod","category":"page"},{"location":"examples/#Step-2:-Define-wing-parameters","page":"Examples","title":"Step 2: Define wing parameters","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"n_panels = 20          # Number of panels\nspan = 20.0            # Wing span [m]\nchord = 1.0            # Chord length [m]\nv_a = 20.0             # Magnitude of inflow velocity [m/s]\ndensity = 1.225        # Air density [kg/m³]\nalpha_deg = 30.0       # Angle of attack [degrees]\nalpha = deg2rad(alpha_deg)","category":"page"},{"location":"examples/#Step-3:-Create-wing-geometry-with-linear-panel-distribution","page":"Examples","title":"Step 3: Create wing geometry with linear panel distribution","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"wing = Wing(n_panels, spanwise_distribution=LINEAR)","category":"page"},{"location":"examples/#Add-wing-sections-defining-only-tip-sections-with-inviscid-airfoil-model","page":"Examples","title":"Add wing sections - defining only tip sections with inviscid airfoil model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"add_section!(wing, \n    [0.0, span/2, 0.0],    # Left tip LE \n    [chord, span/2, 0.0],  # Left tip TE\n    INVISCID)\nadd_section!(wing, \n    [0.0, -span/2, 0.0],   # Right tip LE\n    [chord, -span/2, 0.0], # Right tip TE\n    INVISCID)","category":"page"},{"location":"examples/#Step-4:-Initialize-aerodynamics","page":"Examples","title":"Step 4: Initialize aerodynamics","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"body_aero = BodyAerodynamics([wing])","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We need to pass here an array of wing objects, because a body can have multiple wings.","category":"page"},{"location":"examples/#Set-inflow-conditions","page":"Examples","title":"Set inflow conditions","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"vel_app = [cos(alpha), 0.0, sin(alpha)] .* v_a\nset_va!(body_aero, vel_app, [0, 0, 0.1])","category":"page"},{"location":"examples/#Step-5:-Plot-the-geometry","page":"Examples","title":"Step 5: Plot the geometry","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"plot_geometry(\n      body_aero,\n      \"Rectangular_wing_geometry\";\n      data_type=\".pdf\",\n      save_path=\".\",\n      is_save=false,\n      is_show=true,\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You should see a plot like this:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: Rectangular Wing)","category":"page"},{"location":"examples/#Step-6:-Initialize-solvers-for-both-LLT-and-VSM-methods","page":"Examples","title":"Step 6: Initialize solvers for both LLT and VSM methods","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"llt_solver = Solver(aerodynamic_model_type=LLT)\nvsm_solver = Solver(aerodynamic_model_type=VSM)","category":"page"},{"location":"examples/#Step-7:-Solve-using-both-methods","page":"Examples","title":"Step 7: Solve using both methods","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"results_llt = solve(llt_solver, body_aero)\nresults_vsm = solve(vsm_solver, body_aero)","category":"page"},{"location":"examples/#Print-results-comparison","page":"Examples","title":"Print results comparison","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"println(\"\\nLifting Line Theory Results:\")\nprintln(\"CL = $(round(results_llt[\"cl\"], digits=4))\")\nprintln(\"CD = $(round(results_llt[\"cd\"], digits=4))\")\nprintln(\"\\nVortex Step Method Results:\")\nprintln(\"CL = $(round(results_vsm[\"cl\"], digits=4))\")\nprintln(\"CD = $(round(results_vsm[\"cd\"], digits=4))\")\nprintln(\"Projected area = $(round(results_vsm[\"projected_area\"], digits=4)) m²\")","category":"page"},{"location":"examples/#Step-8:-Plot-spanwise-distributions","page":"Examples","title":"Step 8: Plot spanwise distributions","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"y_coordinates = [panel.aero_center[2] for panel in body_aero.panels]\n\nplot_distribution(\n    [y_coordinates, y_coordinates],\n    [results_vsm, results_llt],\n    [\"VSM\", \"LLT\"],\n    title=\"Spanwise Distributions\"\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You should see a plot like this:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: Spanwise Distributions)","category":"page"},{"location":"examples/#Step-9:-Plot-polar-curves","page":"Examples","title":"Step 9: Plot polar curves","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"angle_range = range(0, 20, 20)\nplot_polars(\n    [llt_solver, vsm_solver],\n    [body_aero, body_aero],\n    [\"LLT\", \"VSM\"];\n    angle_range,\n    angle_type=\"angle_of_attack\",\n    v_a,\n    title=\"Rectangular Wing Polars\"\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You should see a plot like this:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: Polars)","category":"page"},{"location":"examples/#More-examples","page":"Examples","title":"More examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can execute more examples by typing:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"include(\"examples/menu.jl\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You should see the following menu:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Choose function to execute or `q` to quit: \n > rectangular_wing = include(\"rectangular_wing.jl\")\n   ram_air_kite = include(\"ram_air_kite.jl\")\n   stall_model = include(\"stall_model.jl\")\n   bench = include(\"bench.jl\")\n   cleanup = include(\"cleanup.jl\")\n   quit","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can select one of the examples using the <UP> and <DOWN> keys. Press <ENTER> to run the selected example.","category":"page"},{"location":"explanation/#How-the-model-works","page":"How it works","title":"How the model works","text":"","category":"section"},{"location":"explanation/","page":"How it works","title":"How it works","text":"Flowchart that describes how this software works:","category":"page"},{"location":"explanation/","page":"How it works","title":"How it works","text":"(Image: Flowchart)","category":"page"},{"location":"explanation/","page":"How it works","title":"How it works","text":"AIC: Aerodynamic Influence Coefficient (AIC). The AIC matrix represents the relationship between the induced velocities or pressures on aerodynamic surfaces and the circulation strength or modal deformations of the lifting surfaces.","category":"page"},{"location":"explanation/#References:","page":"How it works","title":"References:","text":"","category":"section"},{"location":"explanation/","page":"How it works","title":"How it works","text":"Fast Aero-Structural Model of a Leading-Edge Inflatable Kite by Oriol Canon, Mac Gaunaa and Roland Schmehl, Energies 2023 16(7),   doi: 10.3390/en16073061","category":"page"},{"location":"explanation/","page":"How it works","title":"How it works","text":"For extensions of the original work see: News.md.","category":"page"},{"location":"glossary/","page":"Glossary","title":"Glossary","text":"Term Explanation\nVSM Vortex Step Method, an enhanced lifting line method that improves upon the classic approach by solving the circulation system at the three-quarter chord position, among the most important details.\nLLM Lifting Line Method\nAIC Aerodynamic Influence Coefficient (AIC). The AIC matrix represents the relationship between the induced velocities or pressures on aerodynamic surfaces and the circulation strength or modal deformations of the lifting surfaces.\ninviscid A fluid flow in which viscosity is considered negligible or zero. This means that there is no internal friction between the fluid layers, and the effects of viscosity on the flow are assumed to be insignificant.\nPanel Flat surface element in 3D that approximate the contour of the aerodynamic body being studied.\nSection A wing section, also known as an airfoil or aerofoil, is the cross-sectional shape of an aircraft wing.\nSpan Distance from one wing tip to the other wing tip.\nPolar The polar typically plots the coefficient of lift (CL) against the coefficient of drag (CD), with the angle of attack as a parameter along the curve.\nDistribution Vector of scalars. Length: number of panels.\nmu mu Dynamic viscosity [N·s/m²]\nalpha alpha Angle of attack [rad]\nbeta beta Elevation angle of the kite [rad]\nbeta_s beta_s Side slip angle [rad]\ndelta delta Angle of the trailing edge’s deformation relative to the chord [rad]\ntheta theta Angle between the panel’s chord and the kite body x-axis, showing twist [rad]\ngamma Gamma The circulation, which is a measure of the rotational speed of the spinning flow in a vortex [m²/s].\nCL, cl Lift coefficient [-]\nCD, cd Drag coefficient [-]\nCS, cs Side force coefficient [-]\nCM, cm Pitching moment coefficient [-]\ncamber The camber of a kite refers to the curvature of its airfoil shape. The camber is typically measured as the maximum distance between the mean camber line (the line equidistant from the upper and lower surfaces) and the chord line of the airfoil.\nchord line The chord line of an airfoil is an imaginary straight line that connects the leading edge (front) to the trailing edge (back) of the airfoil.","category":"page"},{"location":"#Aerodynamic-models-of-3D-wings-using-the-Vortex-Step-Method","page":"Home","title":"Aerodynamic models of 3D wings using the Vortex Step Method","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Vortex Step Method (VSM) is an enhanced lifting line method that improves upon the classic approach by solving the circulation system at the three-quarter chord position, among the most important details. This adjustment allows for more accurate calculations of lift and drag forces, particularly addressing the shortcomings in induced drag prediction.  VSM is further refined by coupling it with 2D viscous airfoil polars, making it well-suited for complex geometries,  including low aspect ratio wings, as well as configurations with sweep, dihedral, and anhedral angles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The software presented here includes a couple of examples: a rectangular wing, a leading-edge inflatable kite and a ram-air kite.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package was translated from the Python code version 1.0.0 available at https://github.com/ocayon/Vortex-Step-Method with some extensions as documented in News.md.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.10 or later,  if you haven't already. On Linux, make sure that Python3 and Matplotlib are installed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt install python3-matplotlib","category":"page"},{"location":"","page":"Home","title":"Home","text":"Furthermore, the packages TestEnv and ControlPlots must be installed globally:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using Pkg; Pkg.add(\"TestEnv\"); Pkg.add(\"ControlPlots\")'","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir vsm\ncd vsm\njulia --project=.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add VortexStepMethod from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add VortexStepMethod\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test VortexStepMethod\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"To run the examples, type:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using VortexStepMethod\nVortexStepMethod.install_examples()\ninclude(\"examples/menu.jl\")","category":"page"},{"location":"#Running-the-examples-as-developer","page":"Home","title":"Running the examples as developer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have git installed, check out this repo because it makes it easier to understand the code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir repos\ncd repos\ngit clone https://github.com/OpenSourceAWE/VortexStepMethod.jl\ncd VortexStepMethod.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can launch Julia with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project","category":"page"},{"location":"","page":"Home","title":"Home","text":"or with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"./bin/run_julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"In Julia, first update the packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.update()","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then you can display a menu with the available examples:","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/menu.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To browse the code, it is suggested to use VSCode with the Julia plugin.","category":"page"},{"location":"#Input","page":"Home","title":"Input","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Three kinds of input data is needed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The wing geometry, defined by section:\nfor the rectangualar wing two sections, two points in CAD reference frame + polars   (three different options to provide them) per section\nkite wing: model of polars included, n sections to define\nThe airflow and turn rate:\nv_app vector and omega (turn rate) vector in Kite Body (KB) reference frame\nThe configuration:\nhow many panels   –> two sections make a panel.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Apart from the wing geometry there is no input file yet, the input has to be defined in the code.","category":"page"},{"location":"#Example-for-defining-the-required-input:","page":"Home","title":"Example for defining the required input:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\n# Step 1: Define wing parameters\nn_panels = 20          # Number of panels\nspan = 20.0            # Wing span [m]\nchord = 1.0            # Chord length [m]\nv_a = 20.0             # Magnitude of inflow velocity [m/s]\ndensity = 1.225        # Air density [kg/m³]\nalpha_deg = 30.0       # Angle of attack [degrees]\nalpha = deg2rad(alpha_deg)\n\n# Step 2: Create wing geometry with linear panel distribution\nwing = Wing(n_panels, spanwise_distribution=LINEAR)\n\n# Add wing sections - defining only tip sections with inviscid airfoil model\nadd_section!(wing, \n    [0.0, span/2, 0.0],    # Left tip LE \n    [chord, span/2, 0.0],  # Left tip TE\n    INVISCID)\nadd_section!(wing, \n    [0.0, -span/2, 0.0],   # Right tip LE\n    [chord, -span/2, 0.0], # Right tip TE\n    INVISCID)\n\n# Step 3: Initialize aerodynamics\nbody_aero = BodyAerodynamics([wing])\n\n# Set inflow conditions\nvel_app = [cos(alpha), 0.0, sin(alpha)] .* v_a\nset_va!(wa, vel_app)","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is possible to import the wing geometry using an .obj file as shown in the example ram_air_kite.jl. During the import the polars are calculated automatically using XFoil. This approach is valid for rigid wings and ram-air kites, but not for leading edge inflatable kites.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Surfplan files can be converted to an input for VortexStepMethod.jl using the SurfplanAdapter.","category":"page"},{"location":"#Output","page":"Home","title":"Output","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"the aerodynamic forces Fx, Fy, Fz\nthe aerodynamic moments Mx, My, Mz\nthe force coefficients CL, CD, CS (side force coefficient)\nthe status of the solver (is the result valid)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition, the spanwise distribution of these and additional values are available.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also the documentation.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use this project in your research, please consider citing it.  Citation details can be found in the CITATION.cff file included in this repository.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License - see the LICENSE file for details.","category":"page"},{"location":"#WAIVER","page":"Home","title":"WAIVER","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Technische Universiteit Delft hereby disclaims all copyright interest in the package “VortexStepMethod.jl” written by the Author(s).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Prof.dr. H.G.C. (Henri) Werij, Dean of Aerospace Engineering","category":"page"},{"location":"#Copyright","page":"Home","title":"Copyright","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2022 Oriol Cayon","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2024 Oriol Cayon, Jelle Poland, TU Delft","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2025 Oriol Cayon, Jelle Poland, Bart van de Lint, Uwe Fechner","category":"page"},{"location":"reference_frames/#Reference-Frames","page":"Reference Frames","title":"Reference Frames","text":"","category":"section"},{"location":"reference_frames/#Introduction","page":"Reference Frames","title":"Introduction","text":"","category":"section"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"Reference frames are needed for following purposes:","category":"page"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"for creating a CAD model of the wing (or the wings)\nfor defining the apparent wind speed vector v_a\nfor calculating the lift and drag and side force coefficients\nfor calculating the resulting forces and moments","category":"page"},{"location":"reference_frames/#CAD-reference-frame-(CAD)","page":"Reference Frames","title":"CAD reference frame (CAD)","text":"","category":"section"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"A geometric model is always created using the CAD reference frame. It can have any origin (with respect to the kite), but usually either the center of gravity of the body or the bridle point/ Kite Control Unit is used. ","category":"page"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"Y defined spanwise, looking at the kite from the front (so seeing the LE first) the front left is positive.\nX is defined chord wise, from LE to TE, positive.\nZ is defined as positive upwards.","category":"page"},{"location":"reference_frames/#Kite-Body-reference-frame-(KB)","page":"Reference Frames","title":"Kite Body reference frame (KB)","text":"","category":"section"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"This is a body-fixed reference frame.","category":"page"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"Y defined spanwise, looking at the kite from the front (so seeing the LE first) the front left is positive.\nX is defined chord wise, from LE to TE, positive.\nZ is defined as the cross product of Y and X","category":"page"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"The origin of the kite reference frame can be defined by the user by passing the keyword argument kite_body_origin = ... to the BodyAerodynamics constructor.","category":"page"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"This reference frame is different from the kite reference frame K used in KiteModels.jl and KiteUtils.jl.","category":"page"},{"location":"reference_frames/#The-turn-rates","page":"Reference Frames","title":"The turn rates","text":"","category":"section"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"The turn rates mathrmomega = mathrmomega_x mathrmomega_y mathrmomega_z are defined in the KB reference frame. The unit of the components is mathrmradmathrms^-1.","category":"page"},{"location":"reference_frames/#Input-and-output","page":"Reference Frames","title":"Input and output","text":"","category":"section"},{"location":"reference_frames/","page":"Reference Frames","title":"Reference Frames","text":"when running a simulation, the turnrate of the kite must be provided on each time step\nthe apparent wind speed vector v_a is defined in the KB reference frame\nthe resulting forces are defined in the KB reference frame\nthe CL, CD, CS and the resulting moments and moment coefficients are defined in the KB reference frame","category":"page"}]
}
