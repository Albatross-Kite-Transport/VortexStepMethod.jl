var documenterSearchIndex = {"docs":
[{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"CurrentModule = VortexStepMethod","category":"page"},{"location":"functions/#Main-Plotting-Functions","page":"Exported Functions","title":"Main Plotting Functions","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"plot_geometry\nplot_distribution\nplot_polars","category":"page"},{"location":"functions/#VortexStepMethod.plot_geometry","page":"Exported Functions","title":"VortexStepMethod.plot_geometry","text":"plot_geometry(wing_aero::WingAerodynamics, title; \n              data_type=\".pdf\", save_path=nothing, \n              is_save=false, is_show=false, \n              view_elevation=15, view_azimuth=-120)\n\nPlot wing geometry from different viewpoints and optionally save/show plots.\n\nArguments:\n\nwing_aero: struct of type WingAerodynamics\ntitle: plot title\n\nKeyword arguments:\n\ndata_type`: string with the file type postfix (default: \".pdf\")\nsave_path: path for saving the graphic (default: nothing)\nis_save: boolean value, indicates if the graphic shall be saved (default: false)\nis_show: boolean value, indicates if the graphic shall be displayed (default: false)\nview_elevation: initial view elevation angle (default: 15) [°]\nview_azimuth: initial view azimuth angle (default: -120) [°]\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.plot_distribution","page":"Exported Functions","title":"VortexStepMethod.plot_distribution","text":"plot_distribution(y_coordinates_list, results_list, label_list;  \n                  title=\"spanwise_distribution\", data_type=\".pdf\",\n                  save_path=nothing, is_save=false, is_show=true)\n\nPlot spanwise distributions of aerodynamic properties.\n\nArguments\n\ny_coordinates_list: List of spanwise coordinates\nresults_list: List of result dictionaries\nlabel_list: List of labels for different results\n\nKeyword arguments\n\ntitle: Plot title (default: \"spanwise_distribution\")\ndata_type: File extension for saving (default: \".pdf\")\nsave_path: Path to save plots (default: nothing)\nis_save: Whether to save plots (default: false)\nis_show: Whether to display plots (default: true)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.plot_polars","page":"Exported Functions","title":"VortexStepMethod.plot_polars","text":"plot_polars(solver_list, wing_aero_list, label_list;\nliterature_path_list=String[], angle_range=range(0, 20, 2), angle_type=\"angle_of_attack\", \nangle_of_attack=0.0, side_slip=0.0, v_a=10.0, \ntitle=\"polar\", data_type=\".pdf\", save_path=nothing, \nis_save=true, is_show=true)\n\nPlot polar data comparing different solvers and configurations.\n\nArguments\n\nsolver_list: List of aerodynamic solvers\nwing_aero_list: List of wing aerodynamics objects\nlabel_list: List of labels for each configuration\n\nKeyword arguments\n\nliterature_path_list: Optional paths to literature data files\nangle_range: Range of angles to analyze [°]\nangle_type: \"angleofattack\" or \"sideslip\"; (default: `angleof_attack`) \nangle_of_attack: AoA to be used for plotting the polars (default: 0.0) [rad]\nside_slip: side slip angle (default: 0.0) [rad]\nv_a: norm of apparent wind speed (default: 10.0) [m/s]\ntitle: plot title\ndata_type: File extension for saving (default: \".pdf\")\nsave_path: Path to save plots (default: nothing)\nis_save: Whether to save plots (default: true)\nis_show: Whether to display plots (default: true)\n\n\n\n\n\n","category":"function"},{"location":"functions/#Helper-Functions","page":"Exported Functions","title":"Helper Functions","text":"","category":"section"},{"location":"functions/","page":"Exported Functions","title":"Exported Functions","text":"set_plot_style\nsave_plot\nshow_plot\nplot_line_segment!\nset_axes_equal!\ncreate_geometry_plot\ngenerate_polar_data","category":"page"},{"location":"functions/#VortexStepMethod.set_plot_style","page":"Exported Functions","title":"VortexStepMethod.set_plot_style","text":"set_plot_style(titel_size=16)\n\nSet the default style for plots using LaTeX.\n\nArguments:\n\ntitel_size: size of the plot title in points (default: 16)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.save_plot","page":"Exported Functions","title":"VortexStepMethod.save_plot","text":"save_plot(fig, save_path, title; data_type=\".pdf\")\n\nSave a plot to a file.\n\nArguments\n\nfig: Plots figure object\nsave_path: Path to save the plot\ntitle: Title of the plot\n\nKeyword arguments\n\ndata_type: File extension (default: \".pdf\")\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.show_plot","page":"Exported Functions","title":"VortexStepMethod.show_plot","text":"show_plot(fig; dpi=130)\n\nDisplay a plot at specified DPI.\n\nArguments\n\nfig: Plots figure object\n\nKeyword arguments\n\ndpi: Dots per inch for the figure (default: 130)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.plot_line_segment!","page":"Exported Functions","title":"VortexStepMethod.plot_line_segment!","text":"plot_line_segment!(ax, segment, color, label; width=3)\n\nPlot a line segment in 3D with arrow.\n\nArguments\n\nax: Plot axis\nsegment: Array of two points defining the segment\ncolor: Color of the segment\nlabel: Label for the legend\n\nKeyword Arguments\n\nwidth: Line width (default: 3)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.set_axes_equal!","page":"Exported Functions","title":"VortexStepMethod.set_axes_equal!","text":"set_axes_equal!(ax; zoom=1.8)\n\nSet 3D plot axes to equal scale.\n\nArguments\n\nax: 3D plot axis\n\nKeyword arguments\n\nzoom: zoom factor (default: 1.8)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.create_geometry_plot","page":"Exported Functions","title":"VortexStepMethod.create_geometry_plot","text":"create_geometry_plot(wing_aero::WingAerodynamics, title, view_elevation, view_azimuth; zoom=1.8)\n\nCreate a 3D plot of wing geometry including panels and filaments.\n\nArguments\n\nwing_aero: struct of type WingAerodynamics\ntitle: plot title\nview_elevation: initial view elevation angle [°]\nview_azimuth: initial view azimuth angle [°]\n\nKeyword arguments\n\nzoom: zoom factor (default: 1.8)\n\n\n\n\n\n","category":"function"},{"location":"functions/#VortexStepMethod.generate_polar_data","page":"Exported Functions","title":"VortexStepMethod.generate_polar_data","text":"generate_polar_data(solver, wing_aero::WingAerodynamics, angle_range;     \n                    angle_type=\"angle_of_attack\", angle_of_attack=0.0,\n                    side_slip=0.0, v_a=10.0)\n\nGenerate polar data for aerodynamic analysis over a range of angles.\n\nArguments\n\nsolver: Aerodynamic solver object\nwing_aero: Wing aerodynamics struct\nangle_range: Range of angles to analyze\n\nKeyword arguments\n\nangle_type: Type of angle variation (\"angleofattack\" or \"side_slip\")\nangle_of_attack: Initial angle of attack [rad]\nside_slip: Initial side slip angle in [rad]\nv_a: norm of apparent wind speed [m/s]\n\nReturns\n\nTuple of polar data array and Reynolds number\n\n\n\n\n\n","category":"function"},{"location":"explanation/#How-the-model-works","page":"How it works","title":"How the model works","text":"","category":"section"},{"location":"explanation/","page":"How it works","title":"How it works","text":"Flowchart that describes how this software works:","category":"page"},{"location":"explanation/","page":"How it works","title":"How it works","text":"(Image: Flowchart)","category":"page"},{"location":"explanation/","page":"How it works","title":"How it works","text":"AIC: Aerodynamic Influence Coefficient (AIC). The AIC matrix represents the relationship between the induced velocities or pressures on aerodynamic surfaces and the circulation strength or modal deformations of the lifting surfaces.","category":"page"},{"location":"explanation/#References:","page":"How it works","title":"References:","text":"","category":"section"},{"location":"explanation/","page":"How it works","title":"How it works","text":"Fast Aero-Structural Model of a Leading-Edge Inflatable Kite by Oriol Canon, Mac Gaunaa and Roland Schmehl, Energies 2023 16(7),   doi: 10.3390/en16073061","category":"page"},{"location":"explanation/","page":"How it works","title":"How it works","text":"For extensions of the original work see: News.md.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = VortexStepMethod","category":"page"},{"location":"#Simulation-of-a-3D-airfoil-using-the-Vortex-Step-Method","page":"Home","title":"Simulation of a 3D airfoil using the Vortex Step Method","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Vortex Step Method (VSM) is an enhanced lifting line method that improves upon the classic approach by solving the circulation system at the three-quarter chord position, among the most important details. This adjustment allows for more accurate calculations of lift and drag forces, particularly addressing the shortcomings in induced drag prediction.  VSM is further refined by coupling it with 2D viscous airfoil polars, making it well-suited for complex geometries,  including low aspect ratio wings, as well as configurations with sweep, dihedral, and anhedral angles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The software presented here includes a couple of examples: a rectangular wing, a leading-edge inflatable kite and a ram-air kite.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package was translated from the Python code version 1.0.0 available at https://github.com/ocayon/Vortex-Step-Method with some extensions as documented in News.md.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.10 or later,  if you haven't already. On Linux, make sure that Python3, Matplotlib and LaTeX are installed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt install python3-matplotlib\nsudo apt install texlive-full texlive-fonts-extra cm-super","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir test\ncd test\njulia --project=.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add VortexStepMethod from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add https://github.com/Albatross-Kite-Transport/VortexStepMethod.jl\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test VortexStepMethod\"","category":"page"},{"location":"#Running-the-examples","page":"Home","title":"Running the examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have git installed, check out this repo because it makes it easier to understand the code:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir repos\ncd repos\ngit clone https://github.com/Albatross-Kite-Transport/VortexStepMethod.jl\ncd VortexStepMethod.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can launch Julia with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project","category":"page"},{"location":"","page":"Home","title":"Home","text":"or with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"./bin/run_julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"In Julia, first update the packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.update()","category":"page"},{"location":"","page":"Home","title":"Home","text":"and then you can execute the first example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/rectangular_wing.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To browse the code, it is suggested to use VSCode with the Julia plugin.","category":"page"},{"location":"#Input","page":"Home","title":"Input","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Three kinds of input data is needed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The wing geometry, defined by section:\nrec wing two section, two point + polars\nkite: model of polars included, n sections to define\nThe airflow:\nv_app vector\nThe configuration:\nhow many panels   –> two sections make a panel.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Apart from the wing geometry there is no input file yet, the input has to be defined in the code.","category":"page"},{"location":"#Example-for-defining-the-required-input:","page":"Home","title":"Example for defining the required input:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"\n# Step 1: Define wing parameters\nn_panels = 20          # Number of panels\nspan = 20.0            # Wing span [m]\nchord = 1.0            # Chord length [m]\nv_a = 20.0            # Magnitude of inflow velocity [m/s]\ndensity = 1.225        # Air density [kg/m³]\nalpha_deg = 30.0       # Angle of attack [degrees]\nalpha = deg2rad(alpha_deg)\n\n# Step 2: Create wing geometry with linear panel distribution\nwing = Wing(n_panels, spanwise_panel_distribution=\"linear\")\n\n# Add wing sections - defining only tip sections with inviscid airfoil model\nadd_section!(wing, \n    [0.0, span/2, 0.0],    # Left tip LE \n    [chord, span/2, 0.0],  # Left tip TE\n    \"inviscid\")\nadd_section!(wing, \n    [0.0, -span/2, 0.0],   # Right tip LE\n    [chord, -span/2, 0.0], # Right tip TE\n    \"inviscid\")\n\n# Step 3: Initialize aerodynamics\nwa = WingAerodynamics([wing])\n\n# Set inflow conditions\nvel_app = [cos(alpha), 0.0, sin(alpha)] .* v_a\nset_va!(wa, (vel_app, 0.0))  # Second parameter is yaw rate","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is possible to import the wing geometry using an .obj file as shown in the example ram_air_kite.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Surfplan files can be converted to an input for VortexStepMethod.jl using the SurfplanAdapter.","category":"page"},{"location":"#Output","page":"Home","title":"Output","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CL, CD, CS (side force coefficient)\nthe spanwise distribution of forces   –> moment coefficients (will be implemented in release 1.1) ","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use this project in your research, please consider citing it.  Citation details can be found in the CITATION.cff file included in this repository.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License - see the [LICENSE]((https://github.com/Albatross-Kite-Transport/VortexStepMethod.jl/blob/main/LICENSE) file for details.","category":"page"},{"location":"#WAIVER","page":"Home","title":"WAIVER","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Technische Universiteit Delft hereby disclaims all copyright interest in the package “VortexStepMethod.jl” written by the Author(s).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Prof.dr. H.G.C. (Henri) Werij, Dean of Aerospace Engineering","category":"page"},{"location":"#Copyright","page":"Home","title":"Copyright","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2022 Oriol Cayon","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2024 Oriol Cayon, Jelle Poland, TU Delft","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright (c) 2025 Oriol Cayon, Jelle Poland, Bart van de Lint, Uwe Fechner","category":"page"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"CurrentModule = VortexStepMethod","category":"page"},{"location":"types/#Basic-Vectors","page":"Exported Types","title":"Basic Vectors","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"   MVec3\n   PosVector\n   VelVector","category":"page"},{"location":"types/#VortexStepMethod.MVec3","page":"Exported Types","title":"VortexStepMethod.MVec3","text":"const MVec3    = MVector{3, Float64}\n\nBasic 3-dimensional vector, stack allocated, mutable.\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.PosVector","page":"Exported Types","title":"VortexStepMethod.PosVector","text":"const PosVector=Union{MVec3, Vector}\n\nPosition vector, either a MVec3 or a Vector for use in function signatures.\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.VelVector","page":"Exported Types","title":"VortexStepMethod.VelVector","text":"const VelVector=Union{MVec3, Vector}\n\nVelocity vector, either a MVec3 or a Vector for use in function signatures.\n\n\n\n\n\n","category":"type"},{"location":"types/#Wing-Geometry,-Panel-and-Aerodynamics","page":"Exported Types","title":"Wing Geometry, Panel and Aerodynamics","text":"","category":"section"},{"location":"types/","page":"Exported Types","title":"Exported Types","text":"    Section\n    Wing\n    BoundFilament\n    Panel\n    PanelProperties\n    WingAerodynamics","category":"page"},{"location":"types/#VortexStepMethod.Section","page":"Exported Types","title":"VortexStepMethod.Section","text":"Section\n\nRepresents a wing section with leading edge, trailing edge, and aerodynamic properties.\n\nFields\n\nLE_point::Vector{Float64}: Leading edge point coordinates\nTE_point::Vector{Float64}: Trailing edge point coordinates\naero_input::Vector{Any}: Aerodynamic input data for the section:\n(\"inviscid\"): Inviscid aerodynamics\n(\"polar_data\", [alpha_column,CL_column,CD_column,CM_column]): Polar data aerodynamics\n(\"lei_airfoil_breukels\", [d_tube,camber]): LEI airfoil with Breukels parameters\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.Wing","page":"Exported Types","title":"VortexStepMethod.Wing","text":"Wing\n\nRepresents a wing composed of multiple sections with aerodynamic properties.\n\nFields\n\nn_panels::Int: Number of panels in aerodynamic mesh\nspanwise_panel_distribution::String: Panel distribution type\nspanwise_direction::Vector{Float64}: Wing span direction vector\nsections::Vector{Section}: List of wing sections\n\nDistribution types\n\n\"linear\": Linear distribution\n\"cosine\": Cosine distribution\n\"cosine_van_Garrel\": van Garrel cosine distribution\n\"split_provided\": Split provided sections\n\"unchanged\": Keep original sections\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.BoundFilament","page":"Exported Types","title":"VortexStepMethod.BoundFilament","text":"BoundFilament\n\nRepresents a bound vortex filament defined by two points.\n\nFields\n\nx1::MVec3: First point\nx2::MVec3: Second point\nlength: Filament length\nr0::MVec3: Vector from x1 to x2\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.Panel","page":"Exported Types","title":"VortexStepMethod.Panel","text":"Panel\n\nRepresents a panel in a vortex step method simulation.\n\nFields\n\nTE_point_1::MVec3: First trailing edge point\nLE_point_1::MVec3: First leading edge point\nTE_point_2::Vector{MVec3}: Second trailing edge point\nLE_point_2::Vector{MVec3}: Second leading edge point\nchord::Float64: Panel chord length\nva::Union{Nothing,Vector{Float64}}: Panel velocity\ncorner_points::Matrix{Float64}: Panel corner points\naero_model::String: Aerodynamic model type\naerodynamic_center::Vector{Float64}: Panel aerodynamic center\ncontrol_point::Vector{MVec3}: Panel control point\nbound_point_1::Vector{MVec3}: First bound point\nbound_point_2::Vector{MVec3}: Second bound point\nx_airf::MVec3: Unit vector perpendicular to chord line\ny_airf::MVec3: Unit vector parallel to chord line\nz_airf::MVec3: Unit vector in spanwise direction\nwidth::Float64: Panel width\nfilaments::Vector{BoundFilament}: Panel filaments\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.PanelProperties","page":"Exported Types","title":"VortexStepMethod.PanelProperties","text":"PanelProperties\n\nStructure to hold calculated panel properties.\n\nFields\n\naero_centers::Vector{PosVector}\ncontrol_points::Vector{PosVector}\nbound_points_1::Vector{PosVector}\nbound_points_2::Vector{PosVector}\nx_airf::Vector{Vector{Float64}}: unclear, please define\ny_airf::Vector{Vector{Float64}}: unclear, please define\nz_airf::Vector{Vector{Float64}}: unclear, please define\n\n\n\n\n\n","category":"type"},{"location":"types/#VortexStepMethod.WingAerodynamics","page":"Exported Types","title":"VortexStepMethod.WingAerodynamics","text":"WingAerodynamics\n\nMain structure for calculating aerodynamic properties of wings.\n\nFields\n\npanels::Vector{Panel}: Vector of Panel structs\nn_panels::Int64: number of panels\nwings::Vector{AbstractWing}: a vector of wings; but why more than one?\n_va::Union{Nothing, Vector{Float64}, Tuple{Vector{Float64}, Float64}}: A vector of the apparent wind speed,                                                       or a tuple of the v_a vector and yaw rate (rad/s).\ngamma_distribution::Union{Nothing, Vector{Float64}}: unclear, please defined\nalpha_uncorrected::Union{Nothing, Vector{Float64}}: unclear, please define\nalpha_corrected::Union{Nothing, Vector{Float64}}: unclear, please define\nstall_angle_list::Vector{Float64}: unclear, please define\n\n\n\n\n\n","category":"type"}]
}
