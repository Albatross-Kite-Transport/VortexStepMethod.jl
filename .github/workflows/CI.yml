name: CI
on:
  push:
    branches:
      - main
    tags: '*'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1'
        os:
          - ubuntu-latest
        build_is_production_build:
          - true
        arch:
          - x64
        include:
          - os: windows-latest
            arch: x64
            version: 1
            build_is_production_build: true
          - os: macOS-latest
            arch: aarch64
            version: 1
            build_is_production_build: true
    steps:
      - name: Install matplotlib
        run: if [ "$RUNNER_OS" = "Linux" ]; then sudo apt-get install -y python3-matplotlib; fi
        shell: bash
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          BUILD_IS_PRODUCTION_BUILD: ${{ matrix.build_is_production_build }}
        with:
          coverage: false
      - uses: julia-actions/julia-processcoverage@v1
  test-with-code-coverage:
    name: Julia ${{ matrix.julia_version }} - ${{ matrix.os }} - ${{ matrix.julia_arch }} - with code coverage
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        julia_version:
          - "1.10"
          - "1.11"
        julia_arch:
          - x64
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - name: Build PyCall
      run: julia --project -e 'ENV["PYTHON"]=""; using Pkg; Pkg.instantiate(); Pkg.add("PyCall"); Pkg.build("PyCall")'
      shell: bash
    - name: Install matplotlib
      run: if [ "$RUNNER_OS" = "Linux" ]; then sudo apt-get install -y python3-matplotlib; fi
      shell: bash
    - uses: actions/checkout@v4
    - uses: julia-actions/setup-julia@v2
      with:
        arch: ${{ matrix.julia_arch }}
        version: ${{ matrix.julia_version }}
    - uses: julia-actions/cache@v2
    - uses: julia-actions/julia-runtest@v1
      env:
        BUILD_IS_PRODUCTION_BUILD: false
    - uses: julia-actions/julia-processcoverage@v1
    - uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
      continue-on-error: true
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
      - name: Build PyCall
        run: julia --project=docs/ -e 'ENV["PYTHON"]=""; using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate(); Pkg.build("PyCall")'
        shell: bash
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
